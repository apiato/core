<?php

declare(strict_types=1);

namespace App\Containers\{{section-name}}\{{container-name}}\Tests\Functional\API;

use App\Containers\{{section-name}}\{{container-name}}\Models\{{model}};
use App\Containers\{{section-name}}\{{container-name}}\Tests\Functional\ApiTestCase;
use App\Containers\{{section-name}}\{{container-name}}\UI\API\Controllers\Update{{model}}Controller;
use App\Containers\AppSection\User\Models\User;
use Illuminate\Testing\Fluent\AssertableJson;
use PHPUnit\Framework\Attributes\CoversNothing;
use PHPUnit\Framework\Attributes\Group;

#[CoversNothing]
#[Group('{{_container-name}}')]
#[Group('api')]
final class {{class-name}} extends ApiTestCase
{
    // TODO: test
    public function testUpdateExisting{{model}}(): void
    {
        $this->actingAs(User::factory()->createOne());
        ${{_model}} = {{model}}::factory()->createOne([
            // 'some_field' => 'new_field_value',
        ]);
        $data = [
            // 'some_field' => 'new_field_value',
        ];

        $response = $this->patchJson(action(Update{{model}}Controller::class, ['id' => ${{_model}}->getHashedKey()]), $data);

        $response->assertOk();
        $response->assertJson(
            static fn (AssertableJson $json): AssertableJson =>
                $json->has('data')
                    ->where('data.type', '{{model}}')
                    ->where('data.id', ${{_model}}->getHashedKey())
                    // ->where('data.some_field', $data['some_field'])
                    ->etc()
        );
    }
}
